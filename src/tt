<div className="error">
                <p>{err}</p>
            </div>
            <div className="container">
                <div className="top">
                    <div className="description">
                        <p>Clouds</p>
                    </div>
                    <div className="temp">
                        <h1>{Math.round(data.celcius)}째C</h1>
                    </div>
                    <div className="location">
                        <p>{data.name}</p>
                    </div>
                </div>
                <div className="bottom">
                    <div className="feels">
                        <p className="bold">{Math.round(data.feels)}째C</p>
                        <p>Feels Like</p>
                    </div>
                    <div className="humidity">
                        <p>{Math.round(data.humidity)}%</p>
                        <p>Humidity</p>
                    </div>
                    <div className="wind">
                        <p>{Math.round(data.speed)}km/h</p>
                        <p>Wind Speed</p>
                    </div>
                </div>
            </div>

        /*
        @media screen and (max-width: 500px) {
            *{
                box-sizing: border-box;
                margin: 0;
                padding: 0;
            }
        
            .app input{
                margin-left: 45px;
            }
        
            .app .bottom p{
                font-size: 1rem;
            }
        
            .app .bottom{
                margin-bottom: 200px;
            }
        }
        
        
        *{
            box-sizing: border-box;
            margin: 0;
            padding: 0;
        }
        
        body{
            margin: 0;
            font-family:"Roboto", Arial !important;
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
            width: 100%;
            height: 100%;
            padding-left: 5px;
            padding-right: 5px;
            padding-bottom: 10px;
            padding-top: 5px;
        }
        
        P{
            font-size: 1.6rem;
        }
        
        h1{
            font-size: 6rem;
        }
        
        .app{
            width: 100%;
            height: 100vh;
            position: relative;
            background-color: rgba(0,0,0,0.4);
            color: #fff;
        }
        
        .app::before{
            content: '';
            background: url(./img/pays.jpg.avif) no-repeat center center/cover;
            position: absolute;
            width: 100%;
            height: 100%;
            top: 0;
            left: 0;
            z-index: -1;
        }
        
        .app .search {
            display: flex;
            align-items: center;
            justify-content: center;
        }
        
        .submit img{
            width: 50px;
            height: 50px;
            border: none;
            border-radius: 50%;
        }
        
        .app input{
            padding: 12px 25px;
            font-size: 1.2rem;
            border-radius: 25px;
            border: 1px solid rgba(255, 255, 255, 0.8);
            background: rgba(255, 255, 255, 0.1);
            margin-right: 12px;
            margin-left: 20%;
            margin-top: 30px;
        }
        
        ::placeholder{
            color: #f8f8f8;
        }
        
        .container{
            max-width: 700px;
            height: 700px;
            margin: auto;
            padding: 0 1rem;
            position: relative;
            top: 10%;
            display: flex;
            flex-direction: column;
            justify-content: space-between;
            align-items: center;
        }
        
        .app .top {
            max-width: 700px;
            width: 100%;
            margin: 1rem auto;
            position: relative;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
        }
        
        
        
        
        
        .app .bottom{
            display: flex;
            justify-content: space-evenly;
            align-items: center;
            width: 100%;
            margin-bottom: 50%;
            padding: 1rem;
            border-radius: 12px;
            background-color: rgba(255, 255, 255, 0.2);
        }
        
        .bold{
            font-weight: 700;
        }

        {`../img/${data.weather[0].icon}.png`}

        lighthous

        .container{
            max-width: 1080px;
            margin: 20px auto;
            max-height: 1080px;
        }
        
        .container::before{
            content: '';
            background: url(./img/matin.jpg) no-repeat center center/cover;
            position: absolute;
            width: 100%;
            height: 100%;
            top: 0;
            left: 0;
            z-index: -1;
        }


        import React from "react";
import { Accordion, AccordionItemHeading, AccordionItem, AccordionItemPanel, AccordionItemButton } from "react-accessible-accordion";
import "./forcast.css";
import clouds from "../icons/03n.png";
import rain from "../icons/10d.png";
import sun from "../icons/sunny_s_cloudy.png";
import fog from "../icons/fog.png";
import driz from "../icons/vent.png"

const WEEK_DAYS = ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"]

const Forcast = ({ data }) => {
    const dayInAweek = new Date().getDay();
    const forcatsDay = WEEK_DAYS.slice(dayInAweek, WEEK_DAYS.length).concat(WEEK_DAYS.slice(0, dayInAweek));

    console.log(forcatsDay)

    if (!data || !data.list) {
        return null; 
    }

    let weatherIcon = '';
    if (data.weather[0].main === "Clouds") {
        weatherIcon = clouds;
    } else if (data.weather[0].main === "Clear") {
        weatherIcon = sun;
    } else if (data.weather[0].main === "Rain") {
        weatherIcon = rain;
    } else if (data.weather[0].main === "Drizzle") {
        weatherIcon = driz;
    } else if (data.weather[0].main === "Mist") {
        weatherIcon = fog;
    } else {
        weatherIcon = driz;
    }

    return (
        <>
            <label className="title">Daily</label>
            <Accordion allowZeroExpanded>
                {data.list.slice(0, 7).map((item, idx) => (
                    <AccordionItem key={idx}>
                        <AccordionItemHeading>
                            <AccordionItemButton>
                                <div className="daily-item">
                                    <img alt="weather" className="icon-small" src={weatherIcon} />
                                    <label className="day">{forcatsDay[idx]}</label>
                                    <label className="description">{item.weather[0].description}</label>
                                    <label className="min-max">{Math.round(item.main.temp_min)}째C / {Math.round(item.main.temp_max)}째C</label>
                                </div>
                            </AccordionItemButton>
                        </AccordionItemHeading>
                        <AccordionItemPanel>
                            <div className="daily-details-grid">
                                <div className="daily-details-grid-item">
                                    <label>Pressure</label>
                                    <label>{item.main.pressure}</label>
                                </div>
                                <div className="daily-details-grid-item">
                                    <label>Humidity</label>
                                    <label>{item.main.humidity}</label>
                                </div>
                                <div className="daily-details-grid-item">
                                    <label>Clouds</label>
                                    <label>{item.clouds.all}</label>
                                </div>
                                <div className="daily-details-grid-item">
                                    <label>Wind</label>
                                    <label>{item.wind.speed}m/s</label>
                                </div>
                                <div className="daily-details-grid-item">
                                    <label>Sea Level</label>
                                    <label>{item.main.sea_level}</label>
                                </div>
                            </div>
                        </AccordionItemPanel>
                    </AccordionItem>
                ))}
            </Accordion>
        </>
    )
}

export default Forcast;

{item.weather && item.weather[0] && (
    <img alt="weather" className="icon-small" src={weatherIcon} />
)}